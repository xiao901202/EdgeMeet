#pragma checksum "C:\Users\circl\Desktop\ConferenceAssistant-main\ConferenceAssistant-main\ConferenceAssistant_fix\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "EE98670CCF7E325E68A06B36E6C0F489A48D62A72E267BD5647C5C3E84EBD026"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceAssistant
{
    partial class MainWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Maximum(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Maximum = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(global::Microsoft.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Microsoft_UI_Xaml_FrameworkElement_Tag(global::Microsoft.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Tag = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainWindow_obj10_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::ConferenceAssistant.ViewModels.TranscriptSegment dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj11;
            private global::Microsoft.UI.Xaml.Controls.HyperlinkButton obj12;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj13;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj11TextDisabled = false;
            private static bool isobj12ContentDisabled = false;
            private static bool isobj12TagDisabled = false;
            private static bool isobj13TextDisabled = false;

            public MainWindow_obj10_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 443 && columnNumber == 68)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 422 && columnNumber == 76)
                {
                    isobj12ContentDisabled = true;
                }
                else if (lineNumber == 424 && columnNumber == 76)
                {
                    isobj12TagDisabled = true;
                }
                else if (lineNumber == 434 && columnNumber == 71)
                {
                    isobj13TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // MainWindow.xaml line 410
                        this.obj10 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target));
                        break;
                    case 11: // MainWindow.xaml line 443
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 12: // MainWindow.xaml line 421
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                        break;
                    case 13: // MainWindow.xaml line 433
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj10.Target as global::Microsoft.UI.Xaml.Controls.Border);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::ConferenceAssistant.ViewModels.TranscriptSegment>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ConferenceAssistant.ViewModels.TranscriptSegment>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ConferenceAssistant.ViewModels.TranscriptSegment obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Text(obj.Text, phase);
                        this.Update_DisplayTimestamp(obj.DisplayTimestamp, phase);
                        this.Update_TimeStamp(obj.TimeStamp, phase);
                        this.Update_Speaker(obj.Speaker, phase);
                    }
                }
            }
            private void Update_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 443
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_DisplayTimestamp(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 421
                    if (!isobj12ContentDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(this.obj12, obj, null);
                    }
                }
            }
            private void Update_TimeStamp(global::System.TimeSpan obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 421
                    if (!isobj12TagDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_FrameworkElement_Tag(this.obj12, obj, null);
                    }
                }
            }
            private void Update_Speaker(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 433
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainWindow_obj37_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::ConferenceAssistant.ViewModels.ConferenceRecord dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj37;
            private global::Microsoft.UI.Xaml.Controls.Button obj38;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj39;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj40;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj41;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj38TagDisabled = false;
            private static bool isobj39TextDisabled = false;
            private static bool isobj40TextDisabled = false;
            private static bool isobj41TextDisabled = false;

            public MainWindow_obj37_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 119 && columnNumber == 52)
                {
                    isobj38TagDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 60)
                {
                    isobj39TextDisabled = true;
                }
                else if (lineNumber == 101 && columnNumber == 60)
                {
                    isobj40TextDisabled = true;
                }
                else if (lineNumber == 105 && columnNumber == 60)
                {
                    isobj41TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 37: // MainWindow.xaml line 83
                        this.obj37 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target));
                        break;
                    case 38: // MainWindow.xaml line 112
                        this.obj38 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 39: // MainWindow.xaml line 96
                        this.obj39 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 40: // MainWindow.xaml line 101
                        this.obj40 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 41: // MainWindow.xaml line 105
                        this.obj41 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj37.Target as global::Microsoft.UI.Xaml.Controls.Border);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::ConferenceAssistant.ViewModels.ConferenceRecord>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ConferenceAssistant.ViewModels.ConferenceRecord>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ConferenceAssistant.ViewModels.ConferenceRecord obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                        this.Update_DisplayDate(obj.DisplayDate, phase);
                        this.Update_DisplayDuration(obj.DisplayDuration, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 112
                    if (!isobj38TagDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_FrameworkElement_Tag(this.obj38, obj, null);
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 96
                    if (!isobj39TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj39, obj, null);
                    }
                }
            }
            private void Update_DisplayDate(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 101
                    if (!isobj40TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj40, obj, null);
                    }
                }
            }
            private void Update_DisplayDuration(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 105
                    if (!isobj41TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj41, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::ConferenceAssistant.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.ListView obj8;
            private global::Microsoft.UI.Xaml.Controls.Slider obj19;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj20;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj21;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj32;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj33;
            private global::Microsoft.UI.Xaml.Controls.ListView obj35;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6TextDisabled = false;
            private static bool isobj8ItemsSourceDisabled = false;
            private static bool isobj19ValueDisabled = false;
            private static bool isobj19MaximumDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj21TextDisabled = false;
            private static bool isobj32ItemsSourceDisabled = false;
            private static bool isobj32SelectedIndexDisabled = false;
            private static bool isobj33ItemsSourceDisabled = false;
            private static bool isobj33SelectedIndexDisabled = false;
            private static bool isobj35ItemsSourceDisabled = false;
            private static bool isobj35SelectedItemDisabled = false;

            private MainWindow_obj1_BindingsTracking bindingsTracking;

            public MainWindow_obj1_Bindings()
            {
                this.bindingsTracking = new MainWindow_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 481 && columnNumber == 47)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 407 && columnNumber == 46)
                {
                    isobj8ItemsSourceDisabled = true;
                }
                else if (lineNumber == 305 && columnNumber == 33)
                {
                    isobj19ValueDisabled = true;
                }
                else if (lineNumber == 306 && columnNumber == 33)
                {
                    isobj19MaximumDisabled = true;
                }
                else if (lineNumber == 354 && columnNumber == 48)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 359 && columnNumber == 48)
                {
                    isobj21TextDisabled = true;
                }
                else if (lineNumber == 184 && columnNumber == 43)
                {
                    isobj32ItemsSourceDisabled = true;
                }
                else if (lineNumber == 185 && columnNumber == 43)
                {
                    isobj32SelectedIndexDisabled = true;
                }
                else if (lineNumber == 172 && columnNumber == 43)
                {
                    isobj33ItemsSourceDisabled = true;
                }
                else if (lineNumber == 173 && columnNumber == 43)
                {
                    isobj33SelectedIndexDisabled = true;
                }
                else if (lineNumber == 78 && columnNumber == 34)
                {
                    isobj35ItemsSourceDisabled = true;
                }
                else if (lineNumber == 79 && columnNumber == 34)
                {
                    isobj35SelectedItemDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // MainWindow.xaml line 480
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // MainWindow.xaml line 406
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    case 19: // MainWindow.xaml line 304
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                        this.bindingsTracking.RegisterTwoWayListener_19(this.obj19);
                        break;
                    case 20: // MainWindow.xaml line 354
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 21: // MainWindow.xaml line 359
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 32: // MainWindow.xaml line 183
                        this.obj32 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_32(this.obj32);
                        break;
                    case 33: // MainWindow.xaml line 171
                        this.obj33 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_33(this.obj33);
                        break;
                    case 35: // MainWindow.xaml line 77
                        this.obj35 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_35(this.obj35);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ConferenceAssistant.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ConferenceAssistant.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::ConferenceAssistant.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Summary(obj.Summary, phase);
                        this.Update_ViewModel_CurrentTranscriptSegments(obj.CurrentTranscriptSegments, phase);
                        this.Update_ViewModel_PlaybackPosition(obj.PlaybackPosition, phase);
                        this.Update_ViewModel_TotalDuration(obj.TotalDuration, phase);
                        this.Update_ViewModel_CurrentTime(obj.CurrentTime, phase);
                        this.Update_ViewModel_TotalTime(obj.TotalTime, phase);
                        this.Update_ViewModel_OutputDevices(obj.OutputDevices, phase);
                        this.Update_ViewModel_SelectedOutputDeviceIndex(obj.SelectedOutputDeviceIndex, phase);
                        this.Update_ViewModel_InputDevices(obj.InputDevices, phase);
                        this.Update_ViewModel_SelectedDeviceIndex(obj.SelectedDeviceIndex, phase);
                        this.Update_ViewModel_ConferenceRecords(obj.ConferenceRecords, phase);
                        this.Update_ViewModel_SelectedRecord(obj.SelectedRecord, phase);
                    }
                }
            }
            private void Update_ViewModel_Summary(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 480
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CurrentTranscriptSegments(global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CurrentTranscriptSegments(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 406
                    if (!isobj8ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_PlaybackPosition(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 304
                    if (!isobj19ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj19, obj);
                    }
                }
            }
            private void Update_ViewModel_TotalDuration(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 304
                    if (!isobj19MaximumDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Maximum(this.obj19, obj);
                    }
                }
            }
            private void Update_ViewModel_CurrentTime(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 354
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }
            private void Update_ViewModel_TotalTime(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 359
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj21, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OutputDevices(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_OutputDevices(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 183
                    if (!isobj32ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj32, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedOutputDeviceIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 183
                    if (!isobj32SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj32, obj);
                    }
                }
            }
            private void Update_ViewModel_InputDevices(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_InputDevices(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 171
                    if (!isobj33ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj33, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedDeviceIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 171
                    if (!isobj33SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj33, obj);
                    }
                }
            }
            private void Update_ViewModel_ConferenceRecords(global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ConferenceRecords(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 77
                    if (!isobj35ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj35, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedRecord(global::ConferenceAssistant.ViewModels.ConferenceRecord obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 77
                    if (!isobj35SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj35, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_19_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.PlaybackPosition = this.obj19.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_32_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedOutputDeviceIndex = this.obj32.SelectedIndex;
                        }
                    }
                }
            }
            private void UpdateTwoWay_33_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedDeviceIndex = this.obj33.SelectedIndex;
                        }
                    }
                }
            }
            private void UpdateTwoWay_35_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedRecord = (global::ConferenceAssistant.ViewModels.ConferenceRecord)this.obj35.SelectedItem;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainWindow_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainWindow_obj1_Bindings> weakRefToBindingObj; 

                public MainWindow_obj1_BindingsTracking(MainWindow_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainWindow_obj1_Bindings>(obj);
                }

                public MainWindow_obj1_Bindings TryGetBindingObject()
                {
                    MainWindow_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_CurrentTranscriptSegments(null);
                    UpdateChildListeners_ViewModel_OutputDevices(null);
                    UpdateChildListeners_ViewModel_InputDevices(null);
                    UpdateChildListeners_ViewModel_ConferenceRecords(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ConferenceAssistant.ViewModels.MainViewModel obj = sender as global::ConferenceAssistant.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Summary(obj.Summary, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentTranscriptSegments(obj.CurrentTranscriptSegments, DATA_CHANGED);
                                bindings.Update_ViewModel_PlaybackPosition(obj.PlaybackPosition, DATA_CHANGED);
                                bindings.Update_ViewModel_TotalDuration(obj.TotalDuration, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentTime(obj.CurrentTime, DATA_CHANGED);
                                bindings.Update_ViewModel_TotalTime(obj.TotalTime, DATA_CHANGED);
                                bindings.Update_ViewModel_OutputDevices(obj.OutputDevices, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedOutputDeviceIndex(obj.SelectedOutputDeviceIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_InputDevices(obj.InputDevices, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedDeviceIndex(obj.SelectedDeviceIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ConferenceRecords(obj.ConferenceRecords, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedRecord(obj.SelectedRecord, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Summary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Summary(obj.Summary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentTranscriptSegments":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentTranscriptSegments(obj.CurrentTranscriptSegments, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlaybackPosition":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PlaybackPosition(obj.PlaybackPosition, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalDuration":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TotalDuration(obj.TotalDuration, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentTime(obj.CurrentTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_TotalTime(obj.TotalTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OutputDevices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OutputDevices(obj.OutputDevices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedOutputDeviceIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedOutputDeviceIndex(obj.SelectedOutputDeviceIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InputDevices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_InputDevices(obj.InputDevices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDeviceIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDeviceIndex(obj.SelectedDeviceIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ConferenceRecords":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ConferenceRecords(obj.ConferenceRecords, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedRecord":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedRecord(obj.SelectedRecord, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::ConferenceAssistant.ViewModels.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::ConferenceAssistant.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CurrentTranscriptSegments(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_CurrentTranscriptSegments(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment> cache_ViewModel_CurrentTranscriptSegments = null;
                public void UpdateChildListeners_ViewModel_CurrentTranscriptSegments(global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.TranscriptSegment> obj)
                {
                    if (obj != cache_ViewModel_CurrentTranscriptSegments)
                    {
                        if (cache_ViewModel_CurrentTranscriptSegments != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CurrentTranscriptSegments).PropertyChanged -= PropertyChanged_ViewModel_CurrentTranscriptSegments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_CurrentTranscriptSegments).CollectionChanged -= CollectionChanged_ViewModel_CurrentTranscriptSegments;
                            cache_ViewModel_CurrentTranscriptSegments = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CurrentTranscriptSegments = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CurrentTranscriptSegments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_CurrentTranscriptSegments;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_OutputDevices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_OutputDevices(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_ViewModel_OutputDevices = null;
                public void UpdateChildListeners_ViewModel_OutputDevices(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_ViewModel_OutputDevices)
                    {
                        if (cache_ViewModel_OutputDevices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_OutputDevices).PropertyChanged -= PropertyChanged_ViewModel_OutputDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_OutputDevices).CollectionChanged -= CollectionChanged_ViewModel_OutputDevices;
                            cache_ViewModel_OutputDevices = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_OutputDevices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_OutputDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_OutputDevices;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_InputDevices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_InputDevices(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_ViewModel_InputDevices = null;
                public void UpdateChildListeners_ViewModel_InputDevices(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_ViewModel_InputDevices)
                    {
                        if (cache_ViewModel_InputDevices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_InputDevices).PropertyChanged -= PropertyChanged_ViewModel_InputDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_InputDevices).CollectionChanged -= CollectionChanged_ViewModel_InputDevices;
                            cache_ViewModel_InputDevices = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_InputDevices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_InputDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_InputDevices;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ConferenceRecords(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ConferenceRecords(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord> cache_ViewModel_ConferenceRecords = null;
                public void UpdateChildListeners_ViewModel_ConferenceRecords(global::System.Collections.ObjectModel.ObservableCollection<global::ConferenceAssistant.ViewModels.ConferenceRecord> obj)
                {
                    if (obj != cache_ViewModel_ConferenceRecords)
                    {
                        if (cache_ViewModel_ConferenceRecords != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ConferenceRecords).PropertyChanged -= PropertyChanged_ViewModel_ConferenceRecords;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ConferenceRecords).CollectionChanged -= CollectionChanged_ViewModel_ConferenceRecords;
                            cache_ViewModel_ConferenceRecords = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ConferenceRecords = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ConferenceRecords;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ConferenceRecords;
                        }
                    }
                }
                public void RegisterTwoWayListener_19(global::Microsoft.UI.Xaml.Controls.Slider sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_19_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_32(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_32_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_33(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_33_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_35(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_35_SelectedItem();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainWindow.xaml line 51
                {
                    this.MainContentGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 3: // MainWindow.xaml line 495
                {
                    this.CompactRecordingPanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 4: // MainWindow.xaml line 528
                {
                    this.CompactRecordingTimeText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 5: // MainWindow.xaml line 548
                {
                    this.CompactStopButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.CompactStopButton).Click += this.StopRecordingButton_Click;
                }
                break;
            case 6: // MainWindow.xaml line 480
                {
                    this.SummaryText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 7: // MainWindow.xaml line 465
                {
                    this.ExportSummaryButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ExportSummaryButton).Click += this.ExportSummaryButton_Click;
                }
                break;
            case 8: // MainWindow.xaml line 406
                {
                    this.TranscriptSegmentsList = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 12: // MainWindow.xaml line 421
                {
                    global::Microsoft.UI.Xaml.Controls.HyperlinkButton element12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.HyperlinkButton)element12).Click += this.TimestampButton_Click;
                }
                break;
            case 14: // MainWindow.xaml line 391
                {
                    this.ExportTranscriptButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ExportTranscriptButton).Click += this.ExportTranscriptButton_Click;
                }
                break;
            case 15: // MainWindow.xaml line 153
                {
                    this.RecordingControlPanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 16: // MainWindow.xaml line 249
                {
                    this.PlaybackControlPanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 17: // MainWindow.xaml line 367
                {
                    this.ProcessingIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 18: // MainWindow.xaml line 251
                {
                    this.TranscribeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.TranscribeButton).Click += this.TranscribeButton_Click;
                }
                break;
            case 19: // MainWindow.xaml line 304
                {
                    this.PlaybackSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.PlaybackSlider).Tapped += this.PlaybackSlider_Tapped;
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.PlaybackSlider).ValueChanged += this.PlaybackSlider_ValueChanged;
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.PlaybackSlider).PointerPressed += this.PlaybackSlider_PointerPressed;
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.PlaybackSlider).PointerReleased += this.PlaybackSlider_PointerReleased;
                }
                break;
            case 22: // MainWindow.xaml line 322
                {
                    this.PlayPauseButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.PlayPauseButton).Click += this.PlayPauseButton_Click;
                }
                break;
            case 23: // MainWindow.xaml line 333
                {
                    global::Microsoft.UI.Xaml.Controls.Button element23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element23).Click += this.SeekBackward_Click;
                }
                break;
            case 24: // MainWindow.xaml line 342
                {
                    global::Microsoft.UI.Xaml.Controls.Button element24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element24).Click += this.SeekForward_Click;
                }
                break;
            case 25: // MainWindow.xaml line 330
                {
                    this.PlayPauseIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                }
                break;
            case 27: // MainWindow.xaml line 194
                {
                    this.RecordingStatus = global::WinRT.CastExtensions.As<global::ConferenceAssistant.Controls.RecordingStatusControl>(target);
                }
                break;
            case 28: // MainWindow.xaml line 213
                {
                    this.StartRecordingButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.StartRecordingButton).Click += this.StartRecordingButton_Click;
                }
                break;
            case 29: // MainWindow.xaml line 224
                {
                    this.StopRecordingButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.StopRecordingButton).Click += this.StopRecordingButton_Click;
                }
                break;
            case 30: // MainWindow.xaml line 235
                {
                    this.UploadAudioButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.UploadAudioButton).Click += this.UploadAudioButton_Click;
                }
                break;
            case 31: // MainWindow.xaml line 202
                {
                    this.RecordingTimeText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 32: // MainWindow.xaml line 183
                {
                    this.OutputDeviceComboBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                }
                break;
            case 33: // MainWindow.xaml line 171
                {
                    this.InputDeviceComboBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                }
                break;
            case 34: // MainWindow.xaml line 147
                {
                    this.ControlTitleText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 35: // MainWindow.xaml line 77
                {
                    this.ConferenceRecordsList = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 38: // MainWindow.xaml line 112
                {
                    global::Microsoft.UI.Xaml.Controls.Button element38 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element38).Click += this.RenameRecordButton_Click;
                }
                break;
            case 42: // MainWindow.xaml line 66
                {
                    this.NewRecordingButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.NewRecordingButton).Click += this.NewRecordingButton_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2506")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainWindow.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            case 10: // MainWindow.xaml line 410
                {                    
                    global::Microsoft.UI.Xaml.Controls.Border element10 = (global::Microsoft.UI.Xaml.Controls.Border)target;
                    MainWindow_obj10_Bindings bindings = new MainWindow_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            case 37: // MainWindow.xaml line 83
                {                    
                    global::Microsoft.UI.Xaml.Controls.Border element37 = (global::Microsoft.UI.Xaml.Controls.Border)target;
                    MainWindow_obj37_Bindings bindings = new MainWindow_obj37_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element37.DataContext);
                    element37.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element37, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element37, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

